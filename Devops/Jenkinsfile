pipeline {
  agent any
  stages {
    stage('Preparation') {
      agent { docker { image 'python:3.6.9-alpine' } }
      steps {
        echo '======== executing Preparation Stage ========'
        sh 'pip install --upgrade pip && pip install pipreqs'
        sh 'pipreqs /Providers && pipreqs /Weight'
        //stash(name: 'compiled-results', includes: 'sources/*.py*') 
      }
    }
    stage('Build') {
      steps {
        echo '======== executing Build Stage ========'
        sh 'ls ll Providers'
        script {
          flask = docker.build ("pro", "-f Providers/flask.Dockerfile Providers/")
          wgt = docker.build ("wgt", "-f Providers/flask.Dockerfile Weight/")
        }
      }
    }
    stage('Test') {
      parallel {
        stage('Pro') {
          steps {
            echo '======== executing Test Stage ========'
            sh 'docker container ls -a | grep pt && docker stop wt && docker rm wt || :'
            script {
              flask.withRun('--net nt --name pt') {
                sh 'curl --retry-delay 6 --connect-timeout 5 --max-time 5 --retry 5\
                --retry-connrefused --silent --fail pt:5000'
              }
            }
          }
        }
        stage('Wgt') {
          steps {
            sh 'docker container ls -a | grep wt && docker stop wt && docker rm wt || :'
            script {
              wgt.withRun('--net nt --name wt', 'python ./weight.py') {
                sh 'curl --retry-delay 6 --connect-timeout 5 --max-time 5 --retry 5\
                --retry-connrefused --silent wt:5000'
              }
            }

          }
        }
      }
    }

    stage('Deploy') {
      steps {
        echo '======== executing Deploy Stage ========'
        sh 'docker-compose -f Devops/docker-compose.yml up -d pro wgt'
        sh 'timeout --preserve-status --foreground 60 docker-compose logs -f pro wgt'
      }
    }

  }
  post {
    always {
      echo '========always========'
    }

    success {
      echo '========pipeline executed successfully ========'
    }

    failure {
      echo '========pipeline execution failed========'
    }

  }
}